%% DSC4: Loop over max_satellites of DSC3 - But constraining to (several) circular orbits

clear all

%% Import Kernels and Constants from SPICE

path_to_generic_kernels = '/Users/jpenot/Documents/MATLAB/SPICE/naif.jpl.nasa.gov/pub/naif/generic_kernels';
path_to_mice            = '/Users/jpenot/Documents/MATLAB/SPICE/mice';
addpath(strcat(path_to_mice,'/src/mice'))
addpath(strcat(path_to_mice,'/lib'))

% Load the datafiles (kernels)
% (1) leap-seconds
cspice_furnsh([path_to_generic_kernels,'/lsk/naif0012.tls.pc']);
% (2) planets
cspice_furnsh([path_to_generic_kernels,'/spk/planets/de430.bsp']);
% (3) gravity constants
cspice_furnsh([path_to_generic_kernels,'/pck/gm_de431.tpc']);
% (4) planetary constant - you can also open this file with a text editor
% to read its contentmex -setup
cspice_furnsh([path_to_generic_kernels,'/pck/pck00010.tpc']);

%% Loading Data

global muSu etR AU
AU = 1.496e8; % 1 AU in km
muSu = cspice_bodvcd(10, 'GM', 10); % GM of the Sun with 10 significant digits
interval = 3600*24*5; %5days
ref = 'ECLIPJ2000';

% Dates
date0 = '2035 Jan 1 12:00:00 UTC'; % Simulation start
date1 = '2040 Jan 1 12:00:00 UTC'; % Simulation ends
et0 = cspice_str2et(date0);
et1 = cspice_str2et(date1);
etR = et0:interval:et1; % Row vector of times between start and end date

% Ephemeris Data (km, km/s)
XEa = cspice_spkezr('3', etR, ref, 'NONE', '10'); % Earth ephemeris wrt the Sun in ECLIPJ2000
XMa = cspice_spkezr('4', etR, ref, 'NONE', '10'); % Mars ephemeris wrt the Sun in ECLIPJ2000
XVe = cspice_spkezr('2', etR, ref, 'NONE', '10'); % Venus ephemeris wrt the Sun in ECLIPJ2000

% Num timesteps
[~,nT] = size(XEa);

%% Optimization

% Genetic Algorithm

% Constraints!

MAX_MAXSATS = 50; % Has to be a positive integer
MIN_MAXSATS = 40; % Has to be an integer
SPACING = 1; % Has to be an integer
SATNUMS = MIN_MAXSATS:SPACING:MAX_MAXSATS;
[~,N] = size(SATNUMS);

MIN_R = 0.5; % HAS TO BE IN AU
MAX_R = 1.5; % HAS TO BE IN AU

MAX_LOOPS = 5; % Has to be a positive integer
intcon = 1:MAX_LOOPS;

% Initialize data fields
nums_optN(MAX_LOOPS, N) = 0;
as_optN(MAX_LOOPS, N) = 0;
f0s_optN(MAX_LOOPS, N) = 0;

%% Running

i = 1;
for MAXSATS = SATNUMS
    MAXSATS % For progress tracking

    [A, b, lb, ub] = generateConstraints(MAX_LOOPS, MIN_R, MAX_R, MAXSATS);

    % options = optimoptions('ga','Display','iter','FunctionTolerance', 1e-3, ...
    %         'MaxStallGenerations', 7, 'PopulationSize', min(100*MAXSATS,1000));
    options = optimoptions('ga','Display','iter','FunctionTolerance', 1e-3, ...
           'MaxStallGenerations', 7, 'InitialPopulation');
    
    % Running the GA:
    numvars = 3*MAX_LOOPS;
    try
        [X_opt, fval, EXIT_FLAG, OUTPUT] = ga(@(X) wrapperFuncCirc(XEa,XMa,X),numvars, A, b, [],[],lb,ub,[],intcon,options);
    catch ME
        disp(ME.message);
    end

    % Analysis
    
    % Unpacking Data Output
    [nums_opt, as_opt, f0s_opt] = unpackVarsCirc(X_opt) % Print for progress tracking
    nums_optN(:,i) = nums_opt;
    as_optN(:,i) = as_opt;
    f0s_optN(:,i) = f0s_opt;

    i = i+1;
end

%% Analysis

DequivMean(N) = 0.0;
DequivMin(N) = 0.0;
DequivMax(N) = 0.0;
DrealMean(N) = 0.0;
DrealMin(N) = 0.0;
DrealMax(N) = 0.0;

for i = 1:N
    % Recalculate obtained orbits
    Kns = KnsCircs(nums_optN(:,i), as_optN(:,i), f0s_optN(:,i), muSu);
    [~, nT] = size(etR);

    XSats(:,:,numsats) = zeros(6,nT);
    for n = 1:numsats
        Kn = Kns(:,n);
        XSats(:,:,n) = propagateFromKeplerians(Kn,mu,etR);
    end
    
    % Extract Performance Parameters
    [graphslist,numedges,paths,Dpaths,Dequivs] = networkAnalysis(XEa,XMa,"Earth","Mars",XSats);
    DequivMean(i) = mean(Dequivs)/AU;
    DequivMin(i) = min(Dequivs)/AU;
    DequivMax(i) = max(Dequivs)/AU;
    DrealMean(i) = mean(Dpaths)/AU;
    DrealMin(i) = min(Dpaths)/AU;
    DrealMax(i) = max(Dpaths)/AU;
end

DEaMa = distanceBetweenXs(XEa,XMa);


%% Plotting

c = 3*10^5; % Speed of light, km/s
fitequiv = fit(SATNUMS',DequivMean', 'power1');

figure(1)
plot(SATNUMS,DequivMean, 'Color', 'blue');
hold on
plot(fitequiv);
plot(SATNUMS,DequivMax, 'Color', 'blue', 'LineStyle', '--');
plot(SATNUMS,DequivMin, 'Color', 'blue', 'LineStyle', '--');
hold off
legend('Mean', 'Power Function Fit', 'Bounds at each # of satellites')
xlabel('Maximum permissible # of satellites in constellation')
ylabel('Distance [AU]')
title('Equivalent Transmission Distance')

figure(2)
plot(SATNUMS,DrealMean*AU/c/60, 'Color', 'red');
hold on
plot(SATNUMS,DrealMax*AU/c/60, 'Color', 'red', 'LineStyle', '--');
yline(mean(DEaMa)/c/60, 'green');
yline(max(DEaMa)/c/60, 'Color', 'green', 'LineStyle', '--');
yline(min(DEaMa)/c/60, 'Color', 'green', 'LineStyle', '--');
plot(SATNUMS,DrealMin*AU/c/60, 'Color', 'red', 'LineStyle', '--');
hold off
xlabel('Maximum permissible # of satellites in constellation')
ylabel('Transmission Time [min]')
title('Real Transmission Time')
legend('Constellation Mean', 'Bounds at each # of satellites', ...
    'Earth-Mars direct transmission time (mean)', 'Earth-Mars direct transmission time (max/min throughout orbits)')

% figure(3)
% plot(SATNUMS, numshells_optN);
% hold on
% plot(SATNUMS, numbranches_optN);
% plot(SATNUMS, numcarts_optN);
% plot(SATNUMS, numsats_optN);
% fplot(@(x) x, [0 max(SATNUMS)]);
% hold off
% xlabel('Maximum permissible # of satellites in constellation')
% ylabel('#')
% title('Cartwheel Constellation Configuration Numbers as a Function of Number of Satellites')
% legend('Number of Shells per CFFC', 'Number of Branches per CFFC', 'Number of CFFCs', 'Number of satellites in optimal constellation', 'y=x')
% 
% figure(4)
% plot(SATNUMS, emin_optN);
% hold on
% plot(SATNUMS, emax_optN);
% hold off
% xlabel('Maximum permissible # of satellites in constellation')
% ylabel('Eccentricity')
% title('Cartwheel Constellation Eccentricities as a Function of Number of Satellites')
% legend('emin', 'emax')


%% Saving Data

filename = "DSC4_Data/Circs/DSC4_Circs_min"+ num2str(MIN_MAXSATS) + "max" + num2str(MAX_MAXSATS) + "spacing" + num2str(SPACING);
save(filename)

%% Functions

function Out = wrapperFuncCirc(X1,X2,X)
    global etR muSu
    
    [nums, as, f0s] = unpackVarsCirc(X);
    Kns = KnsCircs(nums, as, f0s, muSu);
    [~, nT] = size(etR);
    
    numsats = sum(nums);
    XSats(:,:,numsats) = zeros(6,nT);
    for n = 1:numsats
        Kn = Kns(:,n);
        XSats(:,:,n) = propagateFromKeplerians(Kn,muSu,etR);
    end

    Out = bestLinkBudget(X1,X2,XSats);
end

function Kns = KnsCircs(nums, as, f0s, mu)
    N = length(nums);
    i = 1;
    Ki = [as(i), 0, 0, 0, 0, f0s(i)];
    Kns = Circular_Kns(Ki, nums(i), mu);
    for i = 2:N
        if nums(i) > 0
            Ki = [as(i), 0, 0, 0, 0, f0s(i)];
            Kns = cat(2, Kns, Circular_Kns(Ki, nums(i), mu));
        end
    end
end

function [nums, as, f0s] = unpackVarsCirc(X)
    AU = 1.496e8; % 1 AU in km
    % Unpack variables and convert as to km
    N = length(X)/3;
    nums = X(1:N);
    as = X(N+1:2*N)*AU;
    f0s = X(2*N+1:3*N);
end

function metric = bestLinkBudget(X1,X2,XSats)
    AU = 1.496e8; % 1 AU in km 
    % TLDR: What's the metric that we're optimizing over?
    [~,~,~,~,Dequivs] = networkAnalysis(X1,X2,"Earth","Mars",XSats);
    metric = mean(Dequivs)/AU;
end

% function [c,ceq] = nonlcon(X,MAXSATS)
% % This is technically a linear constraint, but I'll keep it here for now
% % for clarity.
%     [nums, ~, ~] = unpackVarsCirc(X);
%     numsats = sum(nums);
%     ceq = []; % No equality constraints for MINLPs
%     c = numsats - MAXSATS;
% end

function [A, b, lb, ub] = generateConstraints(N, MIN_R, MAX_R, MAXSATS)
    A = zeros(3*N);
    b = zeros(3*N,1);
    
    % Sum of nums <= MAXSATS
    A(1,1:N) = ones(N,1);
    b(1,1) = MAXSATS;
    %Relative ordering of nums
    % if N >= 2
    %     for i = 1:(N-1)
    %         A(i+1,i) = -1;
    %         A(i+1,i+1) = 1;
    %     end
    % end
    
    lb = zeros(3*N,1);
    lb(N+1:2*N) = MIN_R*ones(N,1); % Each loop has to respect the min R
    lb(1) = 1; % We need at least 1 satellite in the simulation or things get weird

    ub = zeros(3*N,1);
    ub(1:N) = MAXSATS*ones(N,1); % Each loop has a max number of sats
    ub(N+1:2*N) = MAX_R*ones(N,1); % Each loop has to respect the max R
    ub(2*N+1:3*N) = 2*pi*ones(N,1);
end
    